//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banking.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankingEntities : DbContext
    {
        public BankingEntities()
            : base("name=BankingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Transaction> Transaction { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual int TransferMoney(Nullable<int> accountFromId, string accountToNumber, Nullable<decimal> amount, Nullable<decimal> amountActual, string description)
        {
            var accountFromIdParameter = accountFromId.HasValue ?
                new ObjectParameter("AccountFromId", accountFromId) :
                new ObjectParameter("AccountFromId", typeof(int));
    
            var accountToNumberParameter = accountToNumber != null ?
                new ObjectParameter("AccountToNumber", accountToNumber) :
                new ObjectParameter("AccountToNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var amountActualParameter = amountActual.HasValue ?
                new ObjectParameter("AmountActual", amountActual) :
                new ObjectParameter("AmountActual", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferMoney", accountFromIdParameter, accountToNumberParameter, amountParameter, amountActualParameter, descriptionParameter);
        }
    }
}
